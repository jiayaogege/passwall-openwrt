#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: OpenWrt Build for Newifi3

on:
  # 触发机制配置
  workflow_dispatch:    # 手动触发
    inputs:
      debug_mode:
        description: 'Enable SSH debug mode'
        required: false
        default: 'false'
  push:                 # 代码推送触发
    branches: [ master ]
    paths: [ 'newifi3.config' ]
  pull_request:         # PR触发测试
    paths: [ 'newifi3.config' ]

env:
  # 基础环境配置
  REPO_URL: "https://github.com/Lienol/openwrt"   # OpenWrt 源
  REPO_BRANCH: "19.07"                            # 指定稳定分支
  TARGET_DEVICE: "d-team_newifi-d2"               # 设备代号（需验证）
  BUILD_THREADS: "${{ github.runner.os == 'Linux' && '$(nproc)' || '2' }}" # 自动线程数

jobs:
  build-firmware:
    name: Build Newifi3 Firmware
    runs-on: ubuntu-22.04      # 使用 LTS 版本
    timeout-minutes: 120       # 超时保护

    steps:
    # ================= 初始化阶段 =================
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        path: main-repo       # 独立路径防止冲突
        fetch-depth: 0       # 获取完整提交历史

    # ================= 环境准备 =================
    - name: Install build dependencies
      run: |
        # 基础编译依赖（基于 OpenWrt 官方文档）
        sudo apt-get update -y
        sudo apt-get install -y \
          build-essential clang flex bison g++ gawk gcc-multilib \
          gettext git libncurses-dev libssl-dev python3-distutils \
          rsync unzip zlib1g-dev wget curl

    # ================= 源码获取 =================
    - name: Clone OpenWrt source
      uses: actions/checkout@v3
      with:
        repository: ${{ env.REPO_URL }}
        ref: ${{ env.REPO_BRANCH }}
        path: openwrt-source
        fetch-depth: 1       # 浅克隆加速

    # ================= 配置注入 =================
    - name: Apply device configuration
      run: |
        # 拷贝设备配置文件
        cp main-repo/newifi3.config openwrt-source/.config
        
        # 应用自定义补丁（如有）
        if [ -f "main-repo/diy-patch.sh" ]; then
          chmod +x main-repo/diy-patch.sh
          ./main-repo/diy-patch.sh openwrt-source
        fi

    # ================= 缓存优化 =================
    - name: Setup build cache
      uses: actions/cache@v3
      id: build-cache
      with:
        path: |
          openwrt-source/dl         # 下载缓存
          openwrt-source/staging_dir/host  # 编译缓存
          openwrt-source/staging_dir/toolchain-*
        key: ${{ runner.os }}-newifi3-${{ hashFiles('newifi3.config') }}-v3
        restore-keys: |
          ${{ runner.os }}-newifi3-

    # ================= 编译准备 =================
    - name: Prepare build system
      run: |
        cd openwrt-source
        
        # 验证配置文件有效性
        if ! make defconfig; then
          echo "::error::Invalid config file detected!"
          exit 1
        fi
        
        # 并行下载资源（自动失败重试）
        for i in {1..3}; do
          make -j${{ env.BUILD_THREADS }} download && break
          sleep $((i*10))
        done

    # ================= 固件编译 =================
    - name: Compile firmware
      run: |
        cd openwrt-source
        
        # 编译过程优化参数
        echo "FORCE_UNSAFE_CONFIGURE=1" >> $GITHUB_ENV  # 解决某些包的安全限制
        
        # 主编译流程（带错误重试）
        if ! make -j${{ env.BUILD_THREADS }} V=s; then
          # 单线程重试关键部分
          make -j1 V=s tools/install
          make -j1 V=s toolchain/install
          make -j${{ env.BUILD_THREADS }} V=s
        fi

    # ================= 产物处理 =================
    - name: Collect artifacts
      if: success()
      run: |
        # 创建标准化目录结构
        mkdir -p firmware/${{ env.TARGET_DEVICE }}
        
        # 复制固件文件（匹配常见格式）
        cp openwrt-source/bin/targets/ramips/mt7621/*.bin firmware/${{ env.TARGET_DEVICE }}/
        
        # 生成 SHA256 校验
        cd firmware/${{ env.TARGET_DEVICE }}
        sha256sum *.bin > checksum.txt
        
        echo "ARTIFACT_PATH=$(pwd)/.." >> $GITHUB_ENV

    # ================= 制品上传 =================
    - name: Upload firmware
      uses: actions/upload-artifact@v3
      with:
        name: newifi3-firmware-${{ github.run_id }}
        path: ${{ env.ARTIFACT_PATH }}
        retention-days: 7

    # ================= 发布管理 =================
    - name: Create GitHub Release
      if: github.event_name == 'push' && success()
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "newifi3-${{ github.sha }}"     # 唯一标签
        name: "Newifi3 Build ${{ github.run_id }}"
        body: |
          Auto-generated build for Newifi3 D2
          - Commit: ${{ github.sha }}
          - Build Date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
        files: |
          ${{ env.ARTIFACT_PATH }}/*.bin
          ${{ env.ARTIFACT_PATH }}/checksum.txt

    # ================= 清理策略 =================
    - name: Cleanup old artifacts
      if: always()
      uses: dev-drprasad/delete-older-releases@v0.2.0
      with:
        keep_latest: 5        # 保留最近5个版本
        delete_tag_pattern: "newifi3-*"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
