name: OpenWrt Build System for Newifi3

on:
  # ======== 触发机制 ========
  workflow_dispatch:    # 手动触发构建
    inputs:
      skip_cache:
        description: 'Skip cache (clean build)'
        required: false
        default: 'false'
  push:                 # 配置文件变更触发
    branches: [ main ]
    paths: [ 'newifi3.config' ]
  pull_request:         # PR验证触发
    paths: [ 'newifi3.config' ]

env:
  # ======== 核心参数 ========
  REPO_URL: "https://github.com/Lienol/openwrt"  # 源仓库地址
  REPO_BRANCH: "19.07"                          # 指定分支版本
  TARGET_PROFILE: "d-team_newifi-d2"            # Newifi3设备代号
  BUILD_THREADS: 8                              # 推荐8线程构建

jobs:
  firmware-build:
    name: Build Newifi3 Firmware
    runs-on: ubuntu-22.04                       # 指定长期支持镜像
    timeout-minutes: 150                        # 超时保护机制

    steps:
    # ======== 阶段1：代码准备 ========
    - name: Checkout config repo
      uses: actions/checkout@v4
      with:
        path: config-repo
        fetch-depth: 0

    # ======== 阶段2：环境初始化 ========
    - name: Setup build environment
      run: |
        # 安装OpenWrt官方要求的依赖项
        sudo apt-get update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
          build-essential clang flex bison g++ gawk gcc-multilib \
          gettext git libncurses-dev libssl-dev python3-distutils \
          rsync unzip zlib1g-dev file wget curl

    # ======== 阶段3：源码获取 ========
    - name: Clone OpenWrt source
      uses: actions/checkout@v4
      with:
        repository: ${{ env.REPO_URL }}
        ref: ${{ env.REPO_BRANCH }}
        path: openwrt-src
        fetch-depth: 1                          # 浅克隆加速

    # ======== 阶段4：配置注入 ========
    - name: Apply device configuration
      run: |
        # 注入设备配置文件
        cp config-repo/newifi3.config openwrt-src/.config
        
        # 应用自定义补丁（示例）
        if [ -f "config-repo/patches/newifi3.patch" ]; then
          git -C openwrt-src apply ../config-repo/patches/newifi3.patch
        fi

    # ======== 阶段5：缓存管理 ========
    - name: Configure build cache
      if: ${{ !inputs.skip_cache }}
      uses: actions/cache@v4
      with:
        path: |
          openwrt-src/dl
          openwrt-src/staging_dir/host
          openwrt-src/staging_dir/toolchain-*
        key: ${{ runner.os }}-newifi3-${{ hashFiles('newifi3.config') }}-v5
        restore-keys: |
          ${{ runner.os }}-newifi3-

    # ======== 阶段6：编译前准备 ========
    - name: Prepare build system
      run: |
        cd openwrt-src
        
        # 验证配置有效性
        if ! make defconfig; then
          echo "::error file=newifi3.config::Invalid device configuration"
          exit 1
        fi
        
        # 多线程下载重试机制
        for attempt in {1..3}; do
          make -j${{ env.BUILD_THREADS }} download && break
          echo "Download attempt $attempt failed, retrying..."
          sleep $((attempt * 15))
        done

    # ======== 阶段7：核心编译 ========
    - name: Compile firmware
      env:
        FORCE_UNSAFE_CONFIGURE: 1               # 绕过某些包的安全限制
      run: |
        cd openwrt-src
        
        # 主构建流程（带错误恢复）
        if ! make -j${{ env.BUILD_THREADS }} V=s; then
          # 单线程重试关键组件
          make -j1 V=s tools/install
          make -j1 V=s toolchain/install
          make -j${{ env.BUILD_THREADS }} V=s
        fi

        # 验证固件生成
        if [ ! -f bin/targets/ramips/mt7621/*.bin ]; then
          echo "::error::No firmware files generated!"
          exit 1
        fi

    # ======== 阶段8：产物处理 ========
    - name: Package artifacts
      run: |
        # 创建标准化目录结构
        mkdir -p artifacts/${{ env.TARGET_PROFILE }}
        
        # 复制固件文件（匹配MT7621平台）
        cp openwrt-src/bin/targets/ramips/mt7621/*.bin artifacts/${{ env.TARGET_PROFILE }}/
        
        # 生成校验文件
        cd artifacts/${{ env.TARGET_PROFILE }}
        sha256sum *.bin > sha256sums.txt
        
        # 设置环境变量供后续步骤使用
        echo "ARTIFACT_DIR=$(pwd)" >> $GITHUB_ENV

    # ======== 阶段9：制品上传 ========
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: newifi3-firmware-${{ github.run_id }}
        path: |
          ${{ env.ARTIFACT_DIR }}/*.bin
          ${{ env.ARTIFACT_DIR }}/sha256sums.txt
        retention-days: 7
        compression-level: 0        # 禁用压缩提升速度

    # ======== 阶段10：版本发布 ========
    - name: Publish release
      if: github.event_name == 'push'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "newifi3-$(date +%Y%m%d%H%M)"
        name: "Newifi3 Build #${{ github.run_number }}"
        body: |
          ### OpenWrt Build Details
          - **Core Version**: ${{ env.REPO_BRANCH }}
          - **Build Date**: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          - **Commit SHA**: ${{ github.sha }}
        files: |
          ${{ env.ARTIFACT_DIR }}/*.bin
          ${{ env.ARTIFACT_DIR }}/sha256sums.txt

    # ======== 阶段11：清理维护 ========
    - name: Cleanup old releases
      if: always()
      uses: dev-drprasad/delete-older-releases@v2
      with:
        keep_latest: 5              # 保留最新5个版本
        delete_tag_pattern: "newifi3-*"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
